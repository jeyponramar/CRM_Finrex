using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using WebComponent;
using System.Collections;
using System.Data.Common;
using System.Data.SqlClient;

public enum VoucherType
{
    Sales = 1,
    SalesReturn = 2,
    Purchase = 3,
    PurchaseReturn = 4,
    Receipt = 5,
    Payment = 6,
    DirectIncome = 7,
    DirectExpense = 8,
    IndirectIncome = 9,
    IndirectExpense = 10,
    Contra = 11,
    Journal = 12

}
public enum LedgerGroup
{
    All = 0,
    FixedAsset = 1,
    SundryDebtor = 2,
    SundryCreditor = 3,
    Tax = 4,
    BankAccount = 5,
    Cash = 6,
    IndirectExpense = 7
}
public enum Ledger
{
    BankAccount = 1,
    CashAccount = 2,
    PurchaseAccount = 3,
    SalesAccount = 4,
    TDS = 5,
    ProfessionalTAX = 6,
    SalaryDeduction = 7,
    SalaryAccount = 8,
    IndirectExpense = 9
}
public enum LedgerType
{
    Ledger = 0,
    Customer = 1,
    Vendor = 2,
    Employee = 3,
    Labour = 4,
    Expense = 5,
    Others = 6,
    Tax = 7
}
public static class Accounts
{
    public static int GetLedgeIdOfVoucher(VoucherType voucherType)
    {
        if (voucherType == VoucherType.Purchase)
        {
            return Convert.ToInt32(Ledger.PurchaseAccount);
        }
        else if (voucherType == VoucherType.Sales)
        {
            return Convert.ToInt32(Ledger.SalesAccount);
        }
        else if (voucherType == VoucherType.IndirectExpense)
        {
            return Convert.ToInt32(Ledger.IndirectExpense);
        }
        return 0;
    }
    public static string GetCrDrByVoucher(VoucherType voucherType)
    {
        if (voucherType == VoucherType.Sales)
        {
            return "dr";
        }
        else if (voucherType == VoucherType.Receipt)
        {
            return "cr";
        }
        else if (voucherType == VoucherType.Purchase)
        {
            return "cr";
        }
        else if (voucherType == VoucherType.Payment)
        {
            return "dr";
        }
        else if (voucherType == VoucherType.PurchaseReturn)
        {
            return "cr";
        }
        else if (voucherType == VoucherType.SalesReturn)
        {
            return "dr";
        }
        else if (voucherType == VoucherType.IndirectExpense)
        {
            return "cr";
        }

        return "";
    }
    public static string GetCrDrByVoucherReverse(VoucherType voucherType)
    {
        string crdr = GetCrDrByVoucher(voucherType);
        if (crdr == "cr")
        {
            crdr = "dr";
        }
        else
        {
            crdr = "cr";
        }
        return crdr;
    }
    public static int SaveLedger(string ledgerName, LedgerGroup group, string oldLedgerName, LedgerType customerType)
    {
        return SaveLedger(ledgerName, group, oldLedgerName, "", 0, "", customerType);
    }
    public static int SaveLedger(string ledgerName, LedgerGroup group, string oldLedgerName, string moduleName, LedgerType customerType)
    {
        return SaveLedger(ledgerName, group, oldLedgerName, moduleName, 0, "", customerType);
    }
    public static int SaveLedger(string ledgerName, LedgerGroup group, string oldLedgerName, string moduleName, int moduleId, LedgerType customerType)
    {
        return SaveLedger(ledgerName, group, oldLedgerName, moduleName, 0, "", customerType);
    }
    public static int SaveLedger(string ledgerName, LedgerGroup group, string oldLedgerName, string moduleName, int moduleId, string billingName,
         LedgerType customerType)
    {
        if (billingName == "") billingName = ledgerName;
        string query = "select * from tbl_ledger WHERE ledger_ledgername='" + ledgerName + "'";
        int id = 0;
        if (moduleId == 0) id = Common.GetQueryStringValue("id");
        string module = moduleName;
        if (moduleName == "")
        {
            module = Common.GetModuleName();
        }
        if (oldLedgerName != "")
        {
            if (oldLedgerName == ledgerName)
            {
                //return -2;
            }
            else
            {
                //edit
                query += " AND ledger_ledgername<>'" + oldLedgerName + "'";
                string queryOldExists = "select * from tbl_ledger WHERE ledger_ledgername='" + oldLedgerName + "'";
                DataRow drOld = DbTable.ExecuteSelectRow(query);
                if (drOld != null)
                {
                    //update the ledger name
                    int oldLedgerId = GlobalUtilities.ConvertToInt(drOld["ledger_ledgerid"]);
                    string updatequery = "update tbl_ledger set ledger_ledgername='" + ledgerName + "',ledger_billingname='" + ledgerName + "' WHERE ledger_ledgerid=" + oldLedgerId;
                    DbTable.ExecuteQuery(updatequery);
                    return oldLedgerId;
                }
            }
        }
        DataRow dr = DbTable.ExecuteSelectRow(query);
        if (dr != null) return GlobalUtilities.ConvertToInt(dr["ledger_ledgerid"]);
        Hashtable hstbl = new Hashtable();
        hstbl.Add("ledgername", ledgerName);
        hstbl.Add("billingname", billingName);
        hstbl.Add("ledgergroupid", Convert.ToInt32(group));
        hstbl.Add("module", module);
        hstbl.Add("moduleid", id);
        hstbl.Add("ledgertype", Convert.ToInt16(customerType));
        InsertUpdate obj = new InsertUpdate();
        int ledgerid = obj.InsertData(hstbl, "tbl_ledger");
        return ledgerid;
    }
    public static int GetLedgerId(string ledgerName)
    {
        string query = "select * from tbl_ledger WHERE ledger_ledgername='" + ledgerName + "'";
        DataRow drLedger = DbTable.ExecuteSelectRow(query);
        if (drLedger == null)
        {
            return 0;
        }
        else
        {
            return GlobalUtilities.ConvertToInt(drLedger["ledger_ledgerid"]);
        }
    }
    public static int GetLedgerIdOfTax(int taxId)
    {
        string query = "select * from tbl_tax WHERE tax_taxid=" + taxId;
        DataRow drTax = DbTable.ExecuteSelectRow(query);
        if (drTax == null)
        {
            return 0;
        }
        else
        {
            return GetLedgerId(GlobalUtilities.ConvertToString(drTax["tax_tax"]));
        }
    }
    public static int GetLedgerIdOfExpenseType(int expensetypeId)
    {
        string query = "select * from tbl_expensetype WHERE expensetype_expensetypeid=" + expensetypeId;
        DataRow drexpensetype = DbTable.ExecuteSelectRow(query);
        if (drexpensetype == null)
        {
            return 0;
        }
        else
        {
            return GetLedgerId(GlobalUtilities.ConvertToString(drexpensetype["expensetype_expensetype"]));
        }
    }
    public static void SetCrDrAmount(Hashtable hstbl, double amount, VoucherType voucherType)
    {
        if (GetCrDrByVoucher(voucherType) == "cr")
        {
            hstbl.Add("cramount", amount);
            hstbl.Add("dramount", 0);
        }
        else
        {
            hstbl.Add("dramount", amount);
            hstbl.Add("cramount", 0);
        }
    }
    public static void SetCrDrAmountReverse(Hashtable hstbl, double amount, VoucherType voucherType)
    {
        if (GetCrDrByVoucher(voucherType) == "dr")//changed to reverse entry
        {
            hstbl.Add("cramount", amount);
            hstbl.Add("dramount", 0);
        }
        else
        {
            hstbl.Add("dramount", amount);
            hstbl.Add("cramount", 0);
        }
    }
    public static int SaveVoucherDetail(string ledgerName, string voucherNo, string voucherDate, double totalAmount, VoucherType voucherType,
            int moduleId, string subModule, string referenceNo, string prevRefenceNo)
    {
        string query = "";
        int partyLedgerId = GetLedgerId(ledgerName);
        if (partyLedgerId == 0)
        {
            HttpContext.Current.Response.Write("<div class='error'>Invalid Ledger, ledger name does not exists in Accounts</div>");
            return 0;
        }
        //save voucher
        //check whether this voucher created already in accounts
        bool isAddVoucher = true;
        string module = Common.GetModuleName();
        int voucherId = 0;
        double dblAmountPaid = 0;
        if (moduleId > 0)
        {
            query = "select * from tbl_ledgervoucher WHERE ledgervoucher_module='" + module + "' AND ledgervoucher_moduleid=" + moduleId;
            DataRow drVoucher = DbTable.ExecuteSelectRow(query);
            if (drVoucher != null)
            {
                isAddVoucher = false;
                voucherId = GlobalUtilities.ConvertToInt(drVoucher["ledgervoucher_ledgervoucherid"]);
                dblAmountPaid = GlobalUtilities.ConvertToDouble(drVoucher["ledgervoucher_amountpaid"]);
            }
        }
        if (referenceNo == "") referenceNo = voucherNo;
        Hashtable hstblVoucher = new Hashtable();
        hstblVoucher.Add("ledgerid", partyLedgerId);
        hstblVoucher.Add("voucherdate", voucherDate);
        hstblVoucher.Add("totalamount", totalAmount);
        hstblVoucher.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
        hstblVoucher.Add("moduleid", moduleId);
        hstblVoucher.Add("module", module);
        hstblVoucher.Add("voucherno", voucherNo);
        hstblVoucher.Add("referenceno", referenceNo);

        SetCrDrAmount(hstblVoucher, totalAmount, voucherType);

        InsertUpdate objVoucher = new InsertUpdate();
        if (isAddVoucher)
        {
            hstblVoucher.Add("balanceamount", totalAmount);
            voucherId = objVoucher.InsertData(hstblVoucher, "tbl_ledgervoucher");
        }
        else
        {
            double dblBalance = totalAmount - dblAmountPaid;
            hstblVoucher.Add("balanceamount", dblBalance);
            voucherId = objVoucher.UpdateData(hstblVoucher, "tbl_ledgervoucher", voucherId);
        }
        if (voucherId == 0)
        {
            HttpContext.Current.Response.Write("Error occurred while saving voucher in Accounts!");
            return 0;
        }
        //delete existing breakup
        query = "delete from tbl_accountvoucherbreakup WHERE accountvoucherbreakup_ledgervoucherid=" + voucherId;
        DbTable.ExecuteQuery(query);
        //get product detail
        query = "select * from tbl_" + subModule + " WHERE " + subModule + "_" + module + "id=" + moduleId;
        DataTable dttbl = DbTable.ExecuteSelect(query);
        double dblTotalProductAmount = 0;
        bool iscr = false;
        if (voucherType == VoucherType.Sales || voucherType == VoucherType.PurchaseReturn)
        {
            iscr = true;
        }
        else //Indirect Expense
        {
            iscr = false;
        }
        int breakupId = 0;
        for (int i = 0; i < dttbl.Rows.Count; i++)
        {
            bool isTax = false;
            if (voucherType == VoucherType.IndirectExpense)
            {
                isTax = true;
            }
            else
            {
                isTax = GlobalUtilities.ConvertToBool(dttbl.Rows[i][subModule + "_istax"]);
            }
            double amount = GlobalUtilities.ConvertToDouble(dttbl.Rows[i][subModule + "_amount"]);
            if (isTax)
            {
                int ledgerId = 0;
                if (voucherType == VoucherType.IndirectExpense)
                {
                    ledgerId = GetLedgerIdOfExpenseType(GlobalUtilities.ConvertToInt(dttbl.Rows[i][subModule + "_expensetypeid"]));
                }
                else
                {
                    ledgerId = GetLedgerIdOfTax(GlobalUtilities.ConvertToInt(dttbl.Rows[i][subModule + "_productid"]));
                }

                Hashtable hstbl = new Hashtable();
                hstbl.Add("ledgervoucherid", voucherId);
                hstbl.Add("voucherdate", voucherDate);
                hstbl.Add("ledgerid", ledgerId);
                hstbl.Add("accountvouchertypeid", Convert.ToInt32(voucherType));

                if (iscr)
                {
                    hstbl.Add("cramount", amount);
                    hstbl.Add("dramount", 0);
                }
                else
                {
                    hstbl.Add("dramount", amount);
                    hstbl.Add("cramount", 0);
                }
                InsertUpdate obj = new InsertUpdate();
                breakupId = obj.InsertData(hstbl, "tbl_accountvoucherbreakup");
                if (breakupId == 0)
                {
                    HttpContext.Current.Response.Write("Error occurred while saving voucher breakup(product) in Accounts!");
                    return 0;
                }
            }
            else
            {
                dblTotalProductAmount += amount;
            }
        }

        //save voucher account breakup
        if (voucherType == VoucherType.IndirectExpense)
        {
            //saved all sub ledgers already
        }
        else
        {
            int mainLedgerId = GetLedgeIdOfVoucher(voucherType);
            if (mainLedgerId == 0)
            {
                HttpContext.Current.Response.Write("Main ledger type not defined!");
                return 0;
            }
            Hashtable hstblLedgerAc = new Hashtable();
            hstblLedgerAc.Add("ledgervoucherid", voucherId);
            hstblLedgerAc.Add("voucherdate", voucherDate);
            hstblLedgerAc.Add("ledgerid", mainLedgerId);
            hstblLedgerAc.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
            hstblLedgerAc.Add("isparent", 1);

            if (iscr)
            {
                hstblLedgerAc.Add("cramount", dblTotalProductAmount);
                hstblLedgerAc.Add("dramount", 0);
            }
            else
            {
                hstblLedgerAc.Add("dramount", dblTotalProductAmount);
                hstblLedgerAc.Add("cramount", 0);
            }
            InsertUpdate objLedgerAc = new InsertUpdate();
            breakupId = objLedgerAc.InsertData(hstblLedgerAc, "tbl_accountvoucherbreakup");
            if (breakupId == 0)
            {
                HttpContext.Current.Response.Write("Error occurred while saving voucher breakup(main ledger) in Accounts!");
                return 0;
            }
        }
        //save party account breakup
        iscr = !iscr; //reverse CR/DR
        Hashtable hstblPartyAc = new Hashtable();
        hstblPartyAc.Add("ledgervoucherid", voucherId);
        hstblPartyAc.Add("voucherdate", voucherDate);
        hstblPartyAc.Add("ledgerid", partyLedgerId);
        hstblPartyAc.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
        if (iscr)
        {
            hstblPartyAc.Add("cramount", totalAmount);
            hstblPartyAc.Add("dramount", 0);
        }
        else
        {
            hstblPartyAc.Add("dramount", totalAmount);
            hstblPartyAc.Add("cramount", 0);
        }
        InsertUpdate objPartyAc = new InsertUpdate();
        breakupId = objPartyAc.InsertData(hstblPartyAc, "tbl_accountvoucherbreakup");
        if (breakupId == 0)
        {
            HttpContext.Current.Response.Write("Error occurred while saving voucher breakup(party ledger) in Accounts!");
            return 0;
        }
        return voucherId;
    }
    public static int SaveVoucherBreakup(int voucherId, string voucherDate, int ledgerId, VoucherType voucherType, bool iscr, double amount, string referenceNo)
    {
        Hashtable hstbl = new Hashtable();
        hstbl.Add("ledgervoucherid", voucherId);
        hstbl.Add("voucherdate", voucherDate);
        hstbl.Add("ledgerid", ledgerId);
        hstbl.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
        hstbl.Add("referenceno", referenceNo);
        if (iscr)
        {
            hstbl.Add("cramount", amount);
            hstbl.Add("dramount", 0);
        }
        else
        {
            hstbl.Add("dramount", amount);
            hstbl.Add("cramount", 0);
        }
        InsertUpdate obj = new InsertUpdate();
        int breakupId = obj.InsertData(hstbl, "tbl_accountvoucherbreakup");
        return breakupId;
    }
    public static int SaveSalaryDetail(string ledgerName, string voucherNo, string voucherDate, 
            double salary, double basicSalary, double loan, double tds, double professionTax,
            int moduleId, string referenceNo, string prevRefenceNo, string remarks)
    {
        VoucherType voucherType = VoucherType.IndirectExpense;
        string query = "";
        int partyLedgerId = GetLedgerId(ledgerName);
        if (partyLedgerId == 0)
        {
            HttpContext.Current.Response.Write("Invalid Ledger, ledger name does not exists in Accounts");
            return 0;
        }
        //save voucher
        //check whether this voucher created already in accounts
        bool isAddVoucher = true;
        string module = "salary";
        int voucherId = 0;
        double dblAmountPaid = 0;
        if (moduleId > 0)
        {
            query = "select * from tbl_ledgervoucher WHERE ledgervoucher_module='" + module + "' AND ledgervoucher_moduleid=" + moduleId;
            DataRow drVoucher = DbTable.ExecuteSelectRow(query);
            if (drVoucher != null)
            {
                isAddVoucher = false;
                voucherId = GlobalUtilities.ConvertToInt(drVoucher["ledgervoucher_ledgervoucherid"]);
                dblAmountPaid = GlobalUtilities.ConvertToDouble(drVoucher["ledgervoucher_amountpaid"]);
                //delete existing breakup
                query = "delete from tbl_accountvoucherbreakup WHERE accountvoucherbreakup_ledgervoucherid=" + voucherId;
                DbTable.ExecuteQuery(query);
            }
        }
        if (referenceNo == "") referenceNo = voucherNo;
        Hashtable hstblVoucher = new Hashtable();
        hstblVoucher.Add("ledgerid", partyLedgerId);
        hstblVoucher.Add("voucherdate", voucherDate);
        hstblVoucher.Add("totalamount", salary);
        hstblVoucher.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
        hstblVoucher.Add("moduleid", moduleId);
        hstblVoucher.Add("module", module);
        hstblVoucher.Add("voucherno", voucherNo);
        hstblVoucher.Add("referenceno", referenceNo);
        hstblVoucher.Add("narration", remarks);
        SetCrDrAmount(hstblVoucher, salary, voucherType);

        InsertUpdate objVoucher = new InsertUpdate();
        if (isAddVoucher)
        {
            hstblVoucher.Add("balanceamount", salary);
            voucherId = objVoucher.InsertData(hstblVoucher, "tbl_ledgervoucher");
        }
        else
        {
            double dblBalance = salary - dblAmountPaid;
            hstblVoucher.Add("balanceamount", dblBalance);
            voucherId = objVoucher.UpdateData(hstblVoucher, "tbl_ledgervoucher", voucherId);
        }
        if (voucherId == 0)
        {
            HttpContext.Current.Response.Write("Error occurred while saving voucher in Accounts!");
            return 0;
        }

        //breakup entries
        //employee account
        double amount = salary;
        bool iscr = true;
        int ledgerId = partyLedgerId;
        SaveVoucherBreakup(voucherId, voucherDate, ledgerId, voucherType, iscr, amount, referenceNo);

        //salary account
        amount = basicSalary;
        iscr = false;
        ledgerId = Convert.ToInt32(Ledger.SalaryAccount);
        SaveVoucherBreakup(voucherId, voucherDate, ledgerId, voucherType, iscr, amount, referenceNo);

        //tds account
        amount = tds;
        iscr = true;
        ledgerId = Convert.ToInt32(Ledger.TDS);
        SaveVoucherBreakup(voucherId, voucherDate, ledgerId, voucherType, iscr, amount, referenceNo);

        //professional tax account
        amount = professionTax;
        iscr = true;
        ledgerId = Convert.ToInt32(Ledger.ProfessionalTAX);
        SaveVoucherBreakup(voucherId, voucherDate, ledgerId, voucherType, iscr, amount, referenceNo);

        return voucherId;
    }
    public static void SavePaymentReceipt(int ledgervoucherid, int customerLedger, string voucherDate, double totalAmountPaid, 
        Ledger accountLedgerId, VoucherType voucherType, string referenceNo)
    {
        bool iscr = false;
        string query = "delete from tbl_accountvoucherbreakup WHERE accountvoucherbreakup_ledgervoucherid=" + ledgervoucherid;
        DbTable.ExecuteQuery(query);

        if (voucherType == VoucherType.Receipt)
        {
            iscr = true;//LAXMI 6-515: 10AM
        }
        else
        {
            iscr = false;
        }
        Hashtable hstblCustomer = new Hashtable();
        hstblCustomer.Add("ledgervoucherid", ledgervoucherid);
        hstblCustomer.Add("voucherdate", voucherDate);
        hstblCustomer.Add("ledgerid", customerLedger);
        hstblCustomer.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
        hstblCustomer.Add("referenceno", referenceNo);
        if (iscr)
        {
            hstblCustomer.Add("cramount", totalAmountPaid);
            hstblCustomer.Add("dramount", 0);
        }
        else
        {
            hstblCustomer.Add("dramount", totalAmountPaid);
            hstblCustomer.Add("cramount", 0);
        }
        InsertUpdate objCustomer = new InsertUpdate();
        objCustomer.InsertData(hstblCustomer, "tbl_accountvoucherbreakup");

        //reverse cr/dr
        iscr = !iscr;

        Hashtable hstblBank = new Hashtable();
        hstblBank.Add("ledgervoucherid", ledgervoucherid);
        hstblBank.Add("voucherdate", voucherDate);
        hstblBank.Add("ledgerid", Convert.ToInt16(accountLedgerId));
        hstblBank.Add("accountvouchertypeid", Convert.ToInt32(voucherType));
        hstblBank.Add("isparent", 1);
        hstblBank.Add("referenceno", referenceNo);
        if (iscr)
        {
            hstblBank.Add("cramount", totalAmountPaid);
            hstblBank.Add("dramount", 0);
        }
        else
        {
            hstblBank.Add("dramount", totalAmountPaid);
            hstblBank.Add("cramount", 0);
        }
        InsertUpdate objBank = new InsertUpdate();
        objBank.InsertData(hstblBank, "tbl_accountvoucherbreakup");

    }
    public static bool IsValidLedgerCode(string code)
    {
        int id = Common.GetQueryStringValue("id");
        if (code.Trim() == "") return true;
        string query = "select * from tbl_ledger WHERE ledger_code='" + code + "'";
        if (id > 0)
        {
            query += " AND ledger_ledgerid=" + id;
        }
        DataRow dr = DbTable.ExecuteSelectRow(query);
        if (dr == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    //public static void AdjustVoucher(int VoucherId, string PrevRefNo, string RefNo, double TotalAmount)
    //{
    //    string connectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
    //    SqlConnection connection = new SqlConnection(connectionString);
    //    SqlCommand command = new SqlCommand();
    //    command.Connection = connection;
    //    command.CommandType = CommandType.StoredProcedure;
    //    command.CommandText = "usp_AdjustVoucher";
    //    connection.Open();

    //    SqlParameter pVoucherId = new SqlParameter("@VoucherId", SqlDbType.Int);
    //    pVoucherId.Value = VoucherId;
    //    command.Parameters.Add(pVoucherId);

    //    SqlParameter pPrevRefNo = new SqlParameter("@PrevRefNo", SqlDbType.VarChar);
    //    pPrevRefNo.Value = PrevRefNo;
    //    command.Parameters.Add(pPrevRefNo);

    //    SqlParameter pRefNo = new SqlParameter("@RefNo", SqlDbType.VarChar);
    //    pRefNo.Value = RefNo;
    //    command.Parameters.Add(pRefNo);

    //    SqlParameter pTotalAmount = new SqlParameter("@TotalAmount", SqlDbType.Decimal);
    //    pTotalAmount.Value = TotalAmount;
    //    command.Parameters.Add(pTotalAmount);

    //    command.ExecuteNonQuery();
    //}
    public static void AdjustVoucher(int voucherId, string prevRefNo, string refNo, double dblTotalAmount, bool isPayment)
    {
        string query = "";
        int paymentReceiptVoucherId = 5;//receipt
        if (isPayment) paymentReceiptVoucherId = 6;

        string crdr = "dr";
        if (paymentReceiptVoucherId == 5)
        {
            crdr = "cr";
        }
        query = "select sum(isnull(accountvoucherbreakup_"+crdr+"amount,0)) as amountpaid from tbl_accountvoucherbreakup " +
                "JOIN tbl_ledgervoucher ON ledgervoucher_ledgervoucherid = accountvoucherbreakup_ledgervoucherid " +
                "WHERE ledgervoucher_referenceno = '" + refNo + "' AND ledgervoucher_accountvouchertypeid = " + paymentReceiptVoucherId;
        DataRow dr = DbTable.ExecuteSelectRow(query);
        if (dr != null)
        {
            double dblAmountPaid = GlobalUtilities.ConvertToDouble(dr["amountpaid"]);
            double dblBalance = dblTotalAmount - dblAmountPaid;
            query = "update tbl_ledgervoucher set ledgervoucher_amountpaid = " + dblAmountPaid + ", ledgervoucher_balanceamount=" + dblBalance +
                 " WHERE ledgervoucher_ledgervoucherid = " + voucherId;
            DbTable.ExecuteQuery(query);
        }
    }
    public static void AdjustVoucherPayment(string PrevRefNo, string RefNo, bool IsPayment)
    {
        string query = "";
        int paymentReceiptVoucherId = 5;//receipt
        if (IsPayment) paymentReceiptVoucherId = 6;
        int voucherId = 0;
        double dblTotalAmount = 0;

        if (PrevRefNo.Trim() != "" && PrevRefNo != RefNo)
        {
            query = "select top 1 ledgervoucher_ledgervoucherid,ledgervoucher_totalamount from tbl_ledgervoucher " +
                    "WHERE ledgervoucher_referenceno = '" + PrevRefNo + "' " +
                    "AND ledgervoucher_accountvouchertypeid <> " + paymentReceiptVoucherId;
            DataRow drOldOppositVoucher = DbTable.ExecuteSelectRow(query);
            if (drOldOppositVoucher != null)
            {
                voucherId = GlobalUtilities.ConvertToInt(drOldOppositVoucher["ledgervoucher_ledgervoucherid"]);
                dblTotalAmount = GlobalUtilities.ConvertToDouble(drOldOppositVoucher["ledgervoucher_totalamount"]);
                AdjustVoucher(voucherId, "", PrevRefNo, dblTotalAmount, IsPayment);
            }
        }

        //find voucher id of opposite voucher
        query = "select top 1 ledgervoucher_ledgervoucherid,ledgervoucher_totalamount from tbl_ledgervoucher " +
                "WHERE ledgervoucher_referenceno = '" + RefNo + "' " +
                "AND ledgervoucher_accountvouchertypeid <> " + paymentReceiptVoucherId;
        DataRow drOppositVoucher = DbTable.ExecuteSelectRow(query);

        if (drOppositVoucher != null)
        {
            voucherId = GlobalUtilities.ConvertToInt(drOppositVoucher["ledgervoucher_ledgervoucherid"]);
            dblTotalAmount = GlobalUtilities.ConvertToDouble(drOppositVoucher["ledgervoucher_totalamount"]);
            AdjustVoucher(voucherId, "", RefNo, dblTotalAmount, IsPayment);
        }

        return;

    }
    public static string GetOpeningBal(int ledgerId, string date)
    {
        DataRow drOpeningBal = DbTable.GetOneRow("tbl_ledger", ledgerId);
        double openingBalCr = GlobalUtilities.ConvertToDouble(drOpeningBal["ledger_openingbalancecr"]);
        double openingBalDr = GlobalUtilities.ConvertToDouble(drOpeningBal["ledger_openingbalancedr"]);
        if (date != "")
        {
            date = GlobalUtilities.ConvertMMDateToDD(date);
            string query = "SELECT SUM(ISNULL(ledgervoucher_cramount,0)) AS cramount,SUM(ISNULL(ledgervoucher_dramount,0)) AS dramount " +
                           "FROM tbl_ledgervoucher WHERE ledgervoucher_ledgerid=" + ledgerId +
                           "AND CAST(ledgervoucher_voucherdate AS DATE) < CAST('" + date + "' AS DATE)";
            DataRow dr = DbTable.ExecuteSelectRow(query);
            openingBalCr = openingBalCr + GlobalUtilities.ConvertToDouble(dr["cramount"]);
            openingBalDr = openingBalDr + GlobalUtilities.ConvertToDouble(dr["dramount"]);
        }
        if (openingBalCr > openingBalDr)
        {
            return (openingBalCr - openingBalDr) + " Cr";
        }
        else
        {
            return (openingBalDr - openingBalCr) + " Dr";
        }
    }
    public static string GetAccountBal(int ledgerId)
    {
        string query = "select dbo.fn_GetAccountBalance(" + ledgerId + ") as bal";
        DataRow dr = DbTable.ExecuteSelectRow(query);
        double dblBal = GlobalUtilities.ConvertToDouble(dr["bal"]);
        if (dblBal > 0)
        {
            return dblBal + " Cr";
        }
        else
        {
            return (-1 * dblBal) + " Dr";
        }
    }
    public static void SetAccountDateRange(TextBox txtFrom, TextBox txtTo)
    {
        string startDate = "";
        string endDate = "";
        int cy = DateTime.Now.Year;
        int cm = DateTime.Now.Month;

        //1 Apr to 31 Mar
        int m = cm;
        int y = cy;
        string strM = m.ToString();
        if (strM.Length == 1) strM = "0" + strM;
        if (m > 3)//after april
        {
        }
        else
        {
            y = cy - 1;
        }
        startDate = "01-" + strM + "-" + y;

        //find end date
        if (m > 3)
        {
            y = y + 1;
        }
        else
        {
        }
        endDate = "31-" + strM + "-" + y;

        txtFrom.Text = startDate;
        txtTo.Text = endDate;
    }
    public static DataRow GetLedger(int ledgerId)
    {
        return DbTable.ExecuteSelectRow("select * from tbl_ledger WHERE ledger_ledgerid=" + ledgerId);
    }
    public static DataRow GetLedger(string ledgerName)
    {
        return DbTable.ExecuteSelectRow("select * from tbl_ledger WHERE ledger_ledgername='" + ledgerName + "'");
    }
    public static bool DeleteVoucher()
    {
        int mid = Common.GetQueryStringValue("id");
        string m = Common.GetModuleName();
        string query = "delete from tbl_accountvoucherbreakup WHERE accountvoucherbreakup_ledgervoucherid IN(" +
                       "select ledgervoucher_ledgervoucherid FROM tbl_ledgervoucher "+
                       "WHERE ledgervoucher_module='" + m + "' AND ledgervoucher_moduleid=" + mid + ")";
        bool issuccess = DbTable.ExecuteQuery(query);
        if (issuccess)
        {
            query = "delete from tbl_ledgervoucher WHERE ledgervoucher_module='" + m + "' AND ledgervoucher_moduleid=" + mid;
            issuccess = DbTable.ExecuteQuery(query);
        }
        return issuccess;
    }
}
