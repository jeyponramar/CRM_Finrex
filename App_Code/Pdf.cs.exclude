using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using WebComponent;
using System.Collections;
using System.Data;
using iTextSharp;
using iTextSharp.text.html;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.IO;

/// <summary>
/// Summary description for Pdf
/// </summary>
public static class Pdf
{
    public static void SetWaterMark(string filePath, string watermark)
    {
        PdfReader pdfReader = null;
        FileStream stream = null;
        PdfStamper pdfStamper = null;
        string tempPath = HttpContext.Current.Server.MapPath("~/temp/" + Guid.NewGuid() + ".pdf");
        
        try
        {
            File.Copy(filePath, tempPath);
            //create pdfreader object to read sorce pdf
            pdfReader = new PdfReader(tempPath);
            //create stream of filestream or memorystream etc. to create output file
            stream = new FileStream(filePath, FileMode.OpenOrCreate);
            //create pdfstamper object which is used to add addtional content to source pdf file
            pdfStamper = new PdfStamper(pdfReader, stream);
            //iterate through all pages in source pdf
            for (int pageIndex = 1; pageIndex <= pdfReader.NumberOfPages; pageIndex++)
            {
                //Rectangle class in iText represent geomatric representation... in this case, rectanle object would contain page geomatry
                Rectangle pageRectangle = pdfReader.GetPageSizeWithRotation(pageIndex);
                //pdfcontentbyte object contains graphics and text content of page returned by pdfstamper
                PdfContentByte pdfData = pdfStamper.GetUnderContent(pageIndex);
                //create fontsize for watermark
                pdfData.SetFontAndSize(BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252,
                                    BaseFont.NOT_EMBEDDED), 35);
                //create new graphics state and assign opacity
                PdfGState graphicsState = new PdfGState();
                graphicsState.FillOpacity = 0.4F;
                //set graphics state to pdfcontentbyte
                pdfData.SetGState(graphicsState);
                //set color of watermark
                Color c = new Color(204,209,247);
                pdfData.SetColorFill(c);
                //indicates start of writing of text
                pdfData.BeginText();
                //show text as per position and rotation
                pdfData.ShowTextAligned(Element.ALIGN_CENTER, watermark, pageRectangle.Width / 2, pageRectangle.Height / 2, 45);
                //call endText to invalid font set
                pdfData.EndText();
            }
            //close stamper and output filestream
            
            pdfStamper.Close();
            stream.Close();
        }
        catch (Exception e) { }
        finally
        {
            pdfReader = null;
            stream = null;
            pdfStamper = null;
            if (File.Exists(tempPath))
            {
                File.Delete(tempPath);
            }
        }
    }
}
